;; Analyzed by ClojureScript 1.7.48
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name streams.core, :imports {XhrIo goog.net.XhrIo}, :requires {om om.core, om.core om.core, dom om.dom, om.dom om.dom, s clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async, XhrIo goog.net.XhrIo}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, sliding-buffer cljs.core.async, >! cljs.core.async, put! cljs.core.async, take! cljs.core.async}, :defs {->t7840 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stream state owner meta7841])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7840, :variadic false, :file "src/streams/core.cljs", :method-params ([stream state owner meta7841]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 39, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stream state owner meta7841])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, not-nil? {:name streams.core/not-nil?, :file "src/streams/core.cljs", :line 17, :column 1, :end-line 17, :end-column 14, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 17, :column 6, :end-line 17, :end-column 14}}, offline {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 48, :column 7, :end-line 48, :end-column 14, :arglists (quote ([state owner]))}, :name streams.core/offline, :variadic false, :file "src/streams/core.cljs", :end-column 14, :method-params ([state owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state owner]))}, t7852 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7852, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 62, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, stream-state {:name streams.core/stream-state, :file "src/streams/core.cljs", :line 13, :column 1, :end-line 13, :end-column 18, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 13, :column 6, :end-line 13, :end-column 18}}, ->t7852 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([streams state owner meta7853])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7852, :variadic false, :file "src/streams/core.cljs", :method-params ([streams state owner meta7853]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 62, :max-fixed-arity 4, :fn-var true, :arglists (quote ([streams state owner meta7853])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t7843 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7843, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 51, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t7840 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7840, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 39, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t7837 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stream state owner meta7838])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7837, :variadic false, :file "src/streams/core.cljs", :method-params ([stream state owner meta7838]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 39, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stream state owner meta7838])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, temp-state {:name streams.core/temp-state, :file "src/streams/core.cljs", :line 15, :column 1, :end-line 15, :end-column 16, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 15, :column 6, :end-line 15, :end-column 16}}, current-operation {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 32, :column 7, :end-line 32, :end-column 24, :arglists (quote ([state]))}, :name streams.core/current-operation, :variadic false, :file "src/streams/core.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, streams {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 58, :column 7, :end-line 58, :end-column 14, :arglists (quote ([state owner]))}, :name streams.core/streams, :variadic false, :file "src/streams/core.cljs", :end-column 14, :method-params ([state owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state owner]))}, status-class-name {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 24, :column 7, :end-line 24, :end-column 24, :arglists (quote ([state]))}, :name streams.core/status-class-name, :variadic false, :file "src/streams/core.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, base-url {:name streams.core/base-url, :file "src/streams/core.cljs", :line 11, :column 1, :end-line 11, :end-column 14, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 11, :column 6, :end-line 11, :end-column 14}}, t7837 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7837, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 39, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, stream {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([state owner]))}, :name streams.core/stream, :variadic false, :file "src/streams/core.cljs", :end-column 13, :method-params ([state owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state owner]))}, t7846 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7846, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 51, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t7843 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([offline state owner meta7844])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7843, :variadic false, :file "src/streams/core.cljs", :method-params ([offline state owner meta7844]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 51, :max-fixed-arity 4, :fn-var true, :arglists (quote ([offline state owner meta7844])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t7849 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/t7849, :file "src/streams/core.cljs", :type true, :anonymous true, :column 3, :line 62, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, read-data {:protocol-inline nil, :meta {:file "/home/ubuntu/bombers/src/streams/core.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([]))}, :name streams.core/read-data, :variadic false, :file "src/streams/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->t7846 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([offline state owner meta7847])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7846, :variadic false, :file "src/streams/core.cljs", :method-params ([offline state owner meta7847]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 51, :max-fixed-arity 4, :fn-var true, :arglists (quote ([offline state owner meta7847])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t7849 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([streams state owner meta7850])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name streams.core/->t7849, :variadic false, :file "src/streams/core.cljs", :method-params ([streams state owner meta7850]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 62, :max-fixed-arity 4, :fn-var true, :arglists (quote ([streams state owner meta7850])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:onlineStatus :gameTitleInfo meta7847 owner meta7853 meta7841 :else :presence meta7850 offline :name :primaryInfo :channel :recur meta7838 streams state stream :target quote :arglists :titleName :keywordize-keys meta7844}, :order [:keywordize-keys :presence :primaryInfo :onlineStatus :gameTitleInfo :titleName :name :channel stream :arglists quote state owner meta7838 meta7841 offline meta7844 meta7847 streams meta7850 meta7853 :target :recur :else]}, :doc nil}